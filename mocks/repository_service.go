// Code generated by mockery v2.2.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v35github "github.com/google/go-github/v35/github"
)

// RepositoryService is an autogenerated mock type for the RepositoryService type
type RepositoryService struct {
	mock.Mock
}

// ForkRepository provides a mock function with given fields: ctx, repoName
func (_m *RepositoryService) ForkRepository(ctx context.Context, repoName string) error {
	ret := _m.Called(ctx, repoName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, repoName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRepository provides a mock function with given fields: ctx, owner, repoName
func (_m *RepositoryService) GetRepository(ctx context.Context, owner string, repoName string) (*v35github.Repository, error) {
	ret := _m.Called(ctx, owner, repoName)

	var r0 *v35github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v35github.Repository); ok {
		r0 = rf(ctx, owner, repoName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v35github.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, owner, repoName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRepositoryFork provides a mock function with given fields: ctx, owner, repoName
func (_m *RepositoryService) GetUserRepositoryFork(ctx context.Context, owner string, repoName string) (*v35github.Repository, error) {
	ret := _m.Called(ctx, owner, repoName)

	var r0 *v35github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v35github.Repository); ok {
		r0 = rf(ctx, owner, repoName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v35github.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, owner, repoName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepositoryForks provides a mock function with given fields: ctx, repoName
func (_m *RepositoryService) ListRepositoryForks(ctx context.Context, repoName string) ([]*v35github.Repository, error) {
	ret := _m.Called(ctx, repoName)

	var r0 []*v35github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string) []*v35github.Repository); ok {
		r0 = rf(ctx, repoName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v35github.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, repoName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameRepository provides a mock function with given fields: ctx, owner, name, newName
func (_m *RepositoryService) RenameRepository(ctx context.Context, owner string, name string, newName string) error {
	ret := _m.Called(ctx, owner, name, newName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, owner, name, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
