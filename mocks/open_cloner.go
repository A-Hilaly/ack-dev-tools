// Code generated by mockery v2.2.2. DO NOT EDIT.

package mocks

import (
	context "context"

	go_git_v4 "gopkg.in/src-d/go-git.v4"

	mock "github.com/stretchr/testify/mock"
)

// OpenCloner is an autogenerated mock type for the OpenCloner type
type OpenCloner struct {
	mock.Mock
}

// Clone provides a mock function with given fields: ctx, url, dest
func (_m *OpenCloner) Clone(ctx context.Context, url string, dest string) error {
	ret := _m.Called(ctx, url, dest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, url, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields: path
func (_m *OpenCloner) Open(path string) (*go_git_v4.Repository, error) {
	ret := _m.Called(path)

	var r0 *go_git_v4.Repository
	if rf, ok := ret.Get(0).(func(string) *go_git_v4.Repository); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_git_v4.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
